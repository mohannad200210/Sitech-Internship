Basic Git Usage Commands and Explanations
Git is a widely used version control system that allows you to track changes, collaborate with others, and manage your software projects efficiently. This document provides an overview of basic Git commands along with explanations for each command's purpose and usage.

1. git init
Usage: git init

Explanation: Initializes a new Git repository in the current directory, creating the necessary configuration and data structures to start version control.

2. git clone
Usage: git clone <repository_url>

Explanation: Creates a copy of a remote Git repository on your local machine. This is typically the first step when starting to work with an existing project.

3. git add
Usage: git add <file(s)>

Explanation: Stages one or more files for inclusion in the next commit. This command prepares changes to be committed.

4. git commit
Usage: git commit -m "Commit message"

Explanation: Commits the staged changes to the repository, creating a new snapshot of the project's state. The commit message should briefly describe the changes made in this commit.

5. git status
Usage: git status

Explanation: Displays the current status of the repository, showing which files are modified, staged, or untracked.

6. git log
Usage: git log

Explanation: Shows a chronological list of commits in the repository, including commit messages, authors, dates, and commit IDs.

7. git pull
Usage: git pull

Explanation: Fetches the latest changes from a remote repository and merges them into the current local branch. Used to update your local repository with remote changes.

8. git push
Usage: git push <remote> <branch>

Explanation: Sends your local commits to a remote repository, updating the remote branch with your changes.

9. git branch
Usage:

git branch: Lists all branches in the repository.
git branch <branch_name>: Creates a new branch with the given name.
git branch -d <branch_name>: Deletes a branch.
Explanation: Manages branches within the repository. Branches allow for parallel development and isolation of features.

10. git checkout
Usage:

git checkout <branch_name>: Switches to an existing branch.
git checkout -b <new_branch_name>: Creates and switches to a new branch.
Explanation: Changes the current working branch to the specified one, allowing you to work on a different branch.

11. git merge
Usage: git merge <branch_name>

Explanation: Combines changes from the specified branch into the current branch. This integrates changes from different branches.

12. git remote
Usage:

git remote: Lists all remote repositories.
git remote add <remote_name> <repository_url>: Adds a new remote repository.
Explanation: Manages connections to remote repositories, enabling collaboration with others.
